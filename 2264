class Solution {
    public String largestGoodInteger(String num) {
        String max = "";
        for (int i = 0; i <= num.length() - 3; i++) {
            String sub = num.substring(i, i + 3);
            if (sub.charAt(0) == sub.charAt(1) && sub.charAt(1) == sub.charAt(2)) {
                if (max.isEmpty() || sub.compareTo(max) > 0) {
                    max = sub;
                }
            }
        }
        return max;
    }
}
solution 2-
class Solution {
    public String largestGoodInteger(String num) {
        ArrayList<Integer> ans = new ArrayList<>();
        char prev = 0;
        int count = 0;

        for (int i = 0; i < num.length(); i++) {
            char curr = num.charAt(i);
            if (curr == prev) {
                count++;
                if (count == 3) {
                    ans.add(curr - '0'); // store digit as int
                    count = 2; // keep last two same digits for overlap
                }
            } else {
                count = 1;
            }
            prev = curr;
        }

        int max = Integer.MIN_VALUE;
        for (int val : ans) {
            max = Math.max(val, max);
        }

        if (max == Integer.MIN_VALUE) {
            return "";
        } else {
            String have = Integer.toString(max);
            return have + have + have;
        }
    }
}
